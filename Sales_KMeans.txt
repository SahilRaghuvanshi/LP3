import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
#
df = pd.read_csv("sales_data_sample.csv", encoding="latin1")
df.head()
df.info()
df.describe()
#
my_df = df.select_dtypes(exclude=[object])
corr = my_df.corr()
sns.heatmap(corr,annot=True,fmt=".2f")
plt.show()
#
df.isna().sum()
df.dtypes
df = df.drop(['ADDRESSLINE1','ADDRESSLINE2','STATUS','POSTALCODE','CITY','TERRITORY','PHONE','STATE','CONTACTLASTNAME','CONTACTFIRSTNAME','CUSTOMERNAME','ORDERNUMBER','ORDERDATE'],axis=1)
df.isnull().sum()
df['COUNTRY'].unique()
df['PRODUCTLINE'].unique()
df['DEALSIZE'].unique()
productline = pd.get_dummies(df['PRODUCTLINE']).astype(np.uint8)
productline.head()
dealsize = pd.get_dummies(df['DEALSIZE']).astype(np.uint8)
dealsize.head()
df=df.drop(['COUNTRY','PRODUCTLINE','DEALSIZE'],axis=1)
df.dtypes
df['PRODUCTCODE']=pd.Categorical(df['PRODUCTCODE']).codes
df = pd.concat([df,productline,dealsize],axis=1)
df.head()
df.dtypes
######KMeans
import warnings
warnings.filterwarnings("ignore")
from sklearn.cluster import KMeans,k_means
from sklearn.decomposition import PCA
distortions=[]
K=range(1,10)
for k in K:
    kmeanModel = KMeans(n_clusters=k)
    kmeanModel.fit(df)
    distortions.append(kmeanModel.inertia_)
######
plt.figure(figsize=(16,8))
plt.plot(K,distortions,'bx-')
plt.xlabel('k')
plt.ylabel('Distortion')
plt.title('Elbow method showing the optimal K')
plt.show()
###
X_train=df.values
X_train
#
model = KMeans(n_clusters=3,random_state=2)
model=model.fit(X_train)
predictions=model.predict(X_train)
pca = PCA(n_components=2)
reduced_X = pd.DataFrame(pca.fit_transform(X_train),columns=['PCA1','PCA2'])
reduced_X.head()
#
plt.figure(figsize=(14,10))
plt.scatter(reduced_X['PCA1'],reduced_X['PCA2'])
#
model.cluster_centers_
#
reduced_centers = pca.transform(model.cluster_centers_)
reduced_centers
#
plt.figure(figsize=(14,10))
plt.scatter(reduced_X['PCA1'],reduced_X['PCA2'])
plt.scatter(reduced_centers[:,0],reduced_centers[:,1],color='black',marker='x',s=300)
#
reduced_X['Clusters']=predictions
reduced_X
#
reduced_centers[:]
#
plt.figure(figsize=(14,10))
plt.scatter(reduced_X[reduced_X['Clusters']==0].loc[:,'PCA1'],reduced_X[reduced_X['Clusters']==0].loc[:,'PCA2'],color='red')
plt.scatter(reduced_X[reduced_X['Clusters']==1].loc[:,'PCA1'],reduced_X[reduced_X['Clusters']==1].loc[:,'PCA2'],color='blue')
plt.scatter(reduced_X[reduced_X['Clusters']==2].loc[:,'PCA1'],reduced_X[reduced_X['Clusters']==2].loc[:,'PCA2'],color='green')
plt.scatter(reduced_centers[:,0],reduced_centers[:,1],color='black',marker='x',s=300)
#
